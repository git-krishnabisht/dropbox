generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URI")
}

enum FileStatus {
  UPLOADING
  UPLOADED
  FAILED
}

enum ChunkStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  name         String?
  passwordHash String     @map("password_hash")
  createdAt    DateTime   @default(now()) @map("created_at")

  files        FileMetadata[] @relation("UserFiles")

  @@map("users") 
}

model FileMetadata {
  fileId     String      @id @default(uuid()) @map("file_id")
  fileName   String      @map("file_name")
  mimeType   String      @map("mime_type")
  size       Int?
  s3Key      String      @unique @map("s3_key")
  status     FileStatus  @default(UPLOADING)
  userId     String      @map("user_id")

  user   User     @relation("UserFiles", fields: [userId], references: [id])
  chunks Chunk[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("metadata")
  @@index([userId])
}

model Chunk {
  id         String       @id @default(uuid())
  fileId     String       @map("file_id")
  chunkIndex Int          @map("index") 
  size       Int
  s3Key      String       @unique @map("s3_key")
  checksum   String?      @unique 
  status     ChunkStatus  @default(PENDING)
  createdAt  DateTime     @default(now()) @map("created_at")

  file FileMetadata @relation(fields: [fileId], references: [fileId])

  @@map("chunks")
  @@unique([fileId, chunkIndex])
  @@index([fileId])
}
